[{"title":"Spring入门案例【spring框架创建对象】（超详细）","url":"/2021/01/26/Spring入门案例【spring框架创建对象】（超详细）/","content":"\n# Spring框架概述\n**（1）Spring是轻量级的开源的JavaEE框架。\n（2）Spring可以解决企业应用开发的复杂性。\n（3）Spring框架主要由七部分组成，分别是 Spring Core、 Spring AOP、 Spring ORM、 Spring DAO、Spring Context、 Spring Web和 Spring Web MVC。\n（4）<font color=red>Spring有两个核心部分：IOC和AOP\n&nbsp; &nbsp;&nbsp;1、IOC：控制反转，把创建对象的过程交给Spring进行管理。\n  &nbsp;&nbsp; &nbsp;2、AOP：面向切面，不修改源代码进行功能增强。</font>**\n\n<!-- more -->\n\n# Spring框架特点\n**（1）方便解耦，简化开发。\n（2）AOP编程支持。\n（3）方便程序测试。\n（4）方便和其他框架进行整合。\n（5）方便进行事务操作。\n（6）降低API开发难度。**\n\n# 准备过程\n**本文是按照spring-5.2.6进行演示。**\n## 下载 spring-5.2.6.RELEASE-dist.zip\n**下载地址：[ spring-5.2.6](https://repo.spring.io/release/org/springframework/spring/5.2.6.RELEASE/)**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114231911473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n\n## 下载 commons-logging-1.2-bin.zip\n**下载地址：[commons-logging-1.2](http://commons.apache.org/proper/commons-logging/download_logging.cgi)**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114232119862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n## 把两个zip解压挑选核心基础的五个jar包放到新创建的文件夹中\n**如下图所示即可，创建个新的文件夹core用于存放核心基础的五个jar包。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114232403922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n**从 spring和commons中复制出来这五个。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114232708594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n**Spring中四个jar包的路径：spring-framework-5.2.6.RELEASE\\libs下**\n**从这里面复制出来放到core里面**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114232921741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n**commons中一个jar包的路径：commons-logging-1.2下**\n**把这个复制出来放到core里面**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114233108249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n**操作完成以上步骤后就可以进入idea操作了**\n\n# 创建一个新的Java项目\n**New Project**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114233421875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n**勾选上继续下一步**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114233511869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n**写个项目名，Base package根据自己想命名的改，也可以不改，Finish。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114233643327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n\n# 创建lib文件夹，导入jar包\n**在这个位置创建好lib文件夹后，直接从刚才准备好的core文件夹中把那五个核心jar包复制粘贴过来即可。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114234353903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n# 添加依赖\n**1、如图所示点击打开。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114234639631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n**2、继续按图操作**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114234747976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n**3、找到lib把那五个jar包全部选中点击OK**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114234915642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n**4、这样就导入进来了然后点击**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114235234132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n\n\n# 创建个User类\n**有一些是我写的其它的，忽略即可。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210114234156235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n==**User类代码：**==\n\n```java\npackage com.Keafmd.spring5;\n\n/**\n * Keafmd\n *\n * @ClassName: User\n * @Description: User类\n * @author: 牛哄哄的柯南\n * @date: 2021-01-14 19:58\n */\npublic class User {\n\n\t//只写个方法就行了\n    public  void add(){\n        System.out.println(\"add....\");\n    }\n}\n```\n# 在src下创建bean1.xml\n**我的写的有些其它内容，具体代码看下面的代码即可。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021011423552534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n\n==**bean1.xml：**==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- 添加这一行就可以了,配置User对象的创建-->\n    <bean id=\"user\" class=\"com.Keafmd.spring5.User\"></bean>\n\n</beans>\n```\n\n# 创建测试样例\n**在如图位置创建即可。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210115000039864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n==**测试代码：**==\n\n```java\npackage com.Keafmd.spring5.testdemo;\n\nimport com.Keafmd.spring5.User;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * Keafmd\n *\n * @ClassName: TestSpring5\n * @Description:\n * @author: 牛哄哄的柯南\n * @date: 2021-01-14 20:06\n */\npublic class TestSpring5 {\n\t//写完 @Test有红色提醒是因为没导入，直接导入就可以了。\n    @Test\n    public void testAdd(){\n        //1、载Spring的配置文件\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"bean1.xml\");\n\n        //2、获取配置文件中创建的对象  默认是执行无参的构造方法创建\n        User user =applicationContext.getBean(\"user\", User.class);\n\n        System.out.println(user);\n        user.add();\n\n    }\n}\n```\n\n==**测试结果：**==\n```java\ncom.Keafmd.spring5.User@150c158\nadd....\n\nProcess finished with exit code 0\n```\n**运行测试代码，输出user对象的地址和add方法的输出语句就证明完成了入门案例。Spring的核心思想是IOC，即所有对象的创建都是通过Spring，而不需要自己手动生成，这样我们就完成了用spring框架创建对象的入门案例。**\n\n**写作不易，看完如果对你有帮助，感谢点赞支持！\n如果你是电脑端，看到右下角的 “==一键三连==” 了吗，没错点它[哈哈]**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201023201048810.gif#pic_center)\n**加油！**\n\n**共同努力！**\n\n**Keafmd**"},{"title":"SpringMVC中常用注解（案例讲解）","url":"/2021/01/25/SpringMVC中常用注解（案例讲解）/","content":"\n### SpringMVC中常用注解\n\n<!-- more -->\n\n# RequestParam\n\n<font size =5>**说明**</font>\n>**==作用：==\n>把请求中指定名称的参数给控制器中的形参赋值。\n>==属性：==\n>value：请求参数中的名称。\n>required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。**\n\n<font size =5>**代码示例**</font>\n\n==**jsp代码：**==\n\n```java\n<%--\n  Created by IntelliJ IDEA.\n  User: Keafmd\n  Date: 2021/1/25\n  Time: 10:48\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>常用注解</title>\n</head>\n<body>\n\n    <!-- requestParams 注解的使用 -->\n    <a href=\"anno/testRequestParam?name=keafmd\">RequestParam</a><br/>\n\n</body>\n</html>\n```\n==**控制器代码：**==\n\n```java\npackage com.Keafmd.controller;\n\nimport com.Keafmd.domain.User;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.bind.support.SessionStatus;\n\nimport java.util.Date;\nimport java.util.Map;\n\n/**\n * Keafmd\n *\n * @ClassName: AnnoConteoller\n * @Description: 注解的控制器\n * @author: 牛哄哄的柯南\n * @date: 2021-01-25 10:50\n */\n@Controller\n@RequestMapping(\"/anno\")\npublic class AnnoConteoller {\n\n    /**\n     * requestParams 注解的使用\n     * @param username\n     * @return\n     */\n    @RequestMapping(\"/testRequestParam\")\n    public String testRequestParam(@RequestParam(value=\"name\") String username){\n        // @RequestParam(value=\"name\") 必须传name,required：请求参数中是否必须提供此参数，默认值是true，必须提供\n        // 获得当前类名\n        String clazz = Thread.currentThread().getStackTrace()[1].getClassName();\n        // 获得当前方法名\n        String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n\n        System.out.println(\"执行了：\"+clazz+\" - \"+method);\n        System.out.println(\"username:\"+username);\n        return \"success\";\n    }\n\n}\n```\n==**输出结果：**==\n\n```java\n执行了：com.Keafmd.controller.AnnoConteoller - testRequestParam\nusername:keafmd\n```\n\n>**这样我们在href中传入name就会赋值给username。**\n\n# RequestBody\n<font size =5>**说明**</font>\n>**==作用：==\n>用于获取请求体内容。直接使用得到是 key=value&key=value...结构的数据。\n>get 请求方式不适用。\n>==属性：==\n>required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值为 false，get 请求得到是 null。**\n\n<font size =5>**代码示例**</font>\n\n==**jsp代码：**==\n\n```java\n<form action=\"anno/testRequestBody\" method=\"post\">\n        用户姓名：<input type=\"text\" name=\"uname\" /><br/>\n        用户年龄：<input type=\"text\" name=\"age\" /><br/>\n        用户生日：<input type=\"text\" name=\"birthday\" /><br/>\n        <input type=\"submit\" value=\"提交\">\n</form>\n```\n==**控制器代码：**==\n\n```java\n/**\n* 获取到请求体的内容 RequestBody\n */\n\n@RequestMapping(\"/testRequestBody\")\npublic String testRequestBody(@RequestBody String body){\n    String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n    System.out.println(\"执行了：\"+\" \"+method);\n    System.out.println(\"body:\"+body);\n    return \"success\";\n}\n```\n\n==**输出结果：**==\n```java\n执行了： testRequestBody\nbody:uname=Keafmd&age=21&birthday=2000-01-01\n```\n# PathVaribale\n\n## 先了解下REST 风格 URL\n\n>**REST（英文：Representational State Transfer，简称 REST）描述了一个架构样式的网络系统，比如 web 应用程序。值得注意的是 REST 并没有一个明确的标准，而更像是一种设计的风格。**\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20210125191242816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70)\n\n\n<font size =5>**说明**</font>\n>**==作用：==\n>用于绑定 url 中的占位符。例如：请求 url 中 /delete/{id}，这个{id}就是 url 占位符。\n>url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。\n>==属性：==\n>value：用于指定 url 中占位符名称。\n>required：是否必须提供占位符。**\n\n<font size =5>**代码示例**</font>\n\n==**jsp代码：**==\n\n```java\n<a href=\"anno/testPathVariable/10\">testPathVariable</a><br/>\n```\n==**控制器代码：**==\n\n```java\n/**\n* PathVariable\n* @param id\n* @return\n*/\n@RequestMapping(\"/testPathVariable/{sid}\")\npublic String testPathVariable(@PathVariable(name=\"sid\") String id){\n   // 获得当前方法名\n   String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n   System.out.println(\"执行了：\"+\" \"+method);\n   System.out.println(\"id:\"+id);\n   return \"success\";\n}\n```\n\n==**输出结果：**==\n```java\n执行了： testPathVariable\nid:10\n```\n# RequestHeader\n<font size =5>**说明**</font>\n>**==作用：==\n>用于获取请求消息头。\n>==属性：==\n>value：提供消息头名称\n>required：是否必须有此消息头\n>==提示：==\n>在实际开发中一般不常用**\n\n<font size =5>**代码示例**</font>\n\n==**jsp代码：**==\n\n```java\n<a href=\"anno/testRequestHeader\">testRequestHeader</a><br/>\n```\n==**控制器代码：**==\n\n```java\n/**\n* RequestHeader获取请求头的值  不常用\n* @param head\n* @return\n*/\n@RequestMapping(\"/testRequestHeader\")\npublic String testRequestHeader(@RequestHeader(value = \"Accept\") String head){\n   // 获得当前方法名\n   String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n   System.out.println(\"执行了：\"+\" \"+method);\n\n   System.out.println(\"head:\"+head);\n   return \"success\";\n}\n```\n\n==**输出结果：**==\n```java\n执行了： testRequestHeader\nhead:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\n```\n# CookieValue\n\n<font size =5>**说明**</font>\n>**==作用：==\n>用于把指定 cookie 名称的值传入控制器方法参数。\n>==属性：==\n>value：指定 cookie 的名称。\n>required：是否必须有此 cookie。**\n\n<font size =5>**代码示例**</font>\n\n==**jsp代码：**==\n\n```java\n<a href=\"anno/testCookieValue\">testCookValue</a><br/>\n```\n==**控制器代码：**==\n\n```java\n/**\n * CookieValue 不常用\n * @param cookievalue\n * @return\n */\n@RequestMapping(\"/testCookieValue\")\npublic String testCookieValue(@CookieValue(value = \"JSESSIONID\") String cookievalue){\n    // 获得当前方法名\n    String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n    System.out.println(\"执行了：\"+\" \"+method);\n\n    System.out.println(\"cookievalue:\"+cookievalue);\n    return \"success\";\n}\n```\n\n==**输出结果：**==\n```java\n执行了： testCookieValue\ncookievalue:DCCFE2C1F975AC04D4F55973ADA5C89C\n```\n\n# ModelAttribute\n\n<font size =5>**说明**</font>\n>**==作用：==\n>该注解是 SpringMVC4.3 版本以后新加入的。它可以用于修饰方法和参数。\n>出现在方法上，表示==当前方法会在控制器的方法执行之前，先执行==。它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。\n>出现在参数上，获取指定的数据给参数赋值。\n>==属性：==\n>value：用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map 结构的 key。\n>==应用场景：==\n>当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。**\n\n<font size =5>**代码示例**</font>\n\n==**jsp代码：**==\n```java\n<form action=\"anno/testModelAttribute\" method=\"post\">\n\t用户姓名：<input type=\"text\" name=\"uname\" /><br/>\n    用户年龄：<input type=\"text\" name=\"age\" /><br/>\n    <input type=\"submit\" value=\"提交\">\n</form>\n```\n## 修饰的方法有返回值\n==**控制器代码：**==\n\n```java\n/**\n * ModelAttribute\n * @return\n */\n\n@RequestMapping(\"/testModelAttribute\")\npublic String testModelAttribute(User user){\n    // 获得当前方法名\n    String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n    System.out.println(\"执行了：\"+\" \"+method);\n    System.out.println(user);\n    return \"success\";\n}\n\n//有返回值\n@ModelAttribute\npublic User showUser(String uname){\n    String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n    System.out.println(\"执行了：\"+\" \"+method);\n    User user = new User();\n    user.setUname(uname);\n    user.setAge(20);\n    user.setBirthday(new Date());\n    return user;\n}\n```\n==**输出结果：**==\n```java\n执行了： testModelAttribute\nUser{uname='牛哄哄的柯南', age=21, birthday=Mon Jan 25 19:34:46 CST 2021}\n```\n\n\n## 修饰的方法没有返回值\n>**==注意==：没有返回值的时候利用Map把参数传回去，testModelAttribute的参数User前加上@ModelAttribute(\"abc\")接收Map传回的数据。**\n\n==**控制器代码：**==\n\n```java\n/**\n * ModelAttribute\n * @return\n */\n\n@RequestMapping(\"/testModelAttribute\")\npublic String testModelAttribute(@ModelAttribute(\"abc\")User user){\n    // 获得当前方法名\n    String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n    System.out.println(\"执行了：\"+\" \"+method);\n    System.out.println(user);\n    return \"success\";\n}\n\n//无返回值\n@ModelAttribute\npublic void showUser(String uname, Map<String,User> map){\n    String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n    System.out.println(\"执行了：\"+\" \"+method);\n    User user = new User();\n    user.setUname(uname);\n    user.setAge(20);\n    user.setBirthday(new Date());\n    map.put(\"abc\",user);\n}\n```\n\n\n==**输出结果：**==\n```java\n执行了： testModelAttribute\nUser{uname='牛哄哄的柯南', age=21, birthday=Mon Jan 25 19:32:20 CST 2021}\n```\n\n# SessionAttribute\n\n<font size =5>**说明**</font>\n>**==作用：==\n>用于多次执行控制器方法间的参数共享。\n>==属性：==\n>value：用于指定存入的属性名称\n>type：用于指定存入的数据类型。**\n\n<font size =5>**代码示例**</font>\n\n==**jsp代码：**==\n```java\n<a href=\"anno/testSessionAttributes\">存入SessionAttributes</a><br/>\n<a href=\"anno/getSessionAttributes\">获取SessionAttributes</a><br/>\n<a href=\"anno/delSessionAttributes\">清除SessionAttributes</a><br/>\n```\n==**控制器代码：**==\n>**注意：需要在类的上面添加`@SessionAttributes(value = {\"msg\"}) //把msg=牛哄哄的柯南存到session域中`。**\n\n```java\npackage com.Keafmd.controller;\n\nimport com.Keafmd.domain.User;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.bind.support.SessionStatus;\n\nimport java.util.Date;\nimport java.util.Map;\n\n/**\n * Keafmd\n *\n * @ClassName: AnnoConteoller\n * @Description: 注解的控制器\n * @author: 牛哄哄的柯南\n * @date: 2021-01-25 10:50\n */\n@Controller\n@RequestMapping(\"/anno\")\n@SessionAttributes(value = {\"msg\"}) //把msg=牛哄哄的柯南存到session域中\npublic class AnnoConteoller {\n\n    /**\n     * SessionAttributes注解，存入msg\n     * @return\n     */\n    @RequestMapping(\"/testSessionAttributes\")\n    public String testSessionAttributes(Model model){\n        // 获得当前方法名\n        String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"执行了：\"+\" \"+method);\n\n        //底层会存到Request域中\n        model.addAttribute(\"msg\",\"牛哄哄的柯南\");\n\n        return \"success\";\n    }\n\n    /**\n     * 获取\n     * @param modelMap\n     * @return\n     */\n    @RequestMapping(\"/getSessionAttributes\")\n    public String getSessionAttributes(ModelMap modelMap){\n        // 获得当前方法名\n        String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"执行了：\"+\" \"+method);\n\n        //从session域中取出来\n        String msg = (String)modelMap.get(\"msg\");\n        System.out.println(msg);\n        return \"success\";\n    }\n\n    /**\n     * 清除\n     * @param sessionStatus\n     * @return\n     */\n    @RequestMapping(\"/delSessionAttributes\")\n    public String delSessionAttributes(SessionStatus sessionStatus) {\n        // 获得当前方法名\n        String method = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"执行了：\"+\" \"+method);\n\n        //从session域中清除\n        sessionStatus.setComplete();\n        return \"success\";\n    }\n\n\n}\n\n```\n>**依次点击存入->获取->清除->获取。**\n\n==**输出结果：**==\n```java\n执行了： testSessionAttributes\n执行了： getSessionAttributes\n牛哄哄的柯南\n执行了： delSessionAttributes\n执行了： getSessionAttributes\nnull\n```\n\n>**在success.jsp可以通过`${msg}和${sessionScope}`获取到在类上面把msg存入到session域的内容：`牛哄哄的柯南和{msg=牛哄哄的柯南}`**\n>**在success.jsp可以通过`${requestScope}`获取到在testSessionAttributes方法中存入Request域中的内容。**\n\n>**以上就是SpringMVC中常用注解（案例讲解）的全部内容。**","tags":["Keafmd"]},{"title":"Hello World","url":"/2021/01/25/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]